// Modelled after XPath v1.0, http://www.w3.org/TR/xpath/ 

start: location_path

?location_path: relativelocation_path
           | absolutelocation_path
absolutelocation_path: _root_location_path
           | _root_descendent_path
_root_location_path      : child_step step*
_root_descendent_path : descendent_step step*

?relativelocation_path: bare_step
           | relativelocation_path step
?bare_step: _abbreviated_step
?step           : child_step | descendent_step
child_step     : "/" (_step | attribute_step)
descendent_step: "//" (_step | attribute_step)

_step     : (axis_specifier node_test _predicate_list) | _abbreviated_step
?axis_specifier: _axis_name "::"
_axis_name : child_axis_specifier
           | descendant_axis_specifier
           | descendant_or_self
        //    | following
        //    | following_sibling
           | self_axis_specifier
// We don"t support reverse (parental) axes yet
//           | "ancestor"
//           | "ancestor-or-self"
//           | "parent"
//           | "preceding"
//           | "preceding-sibling"
child_axis_specifier              : "child"
descendant_axis_specifier         : "descendant"
descendant_or_self : DESCENDANT_OR_SELF
DESCENDANT_OR_SELF.2: "descendant-or-self"
// following          : "following"
// following_sibling  : "following-sibling"
self_axis_specifier               : "self"

_abbreviated_step : (default_axis_specifier node_test)
default_axis_specifier            :
attribute_step               : "@" CNAME
// We don"t support reverse (parental) axes yet
//                 | parentitem_expr
//parentitem_expr  : ".."
contextitem_expr:  "." -> self
	   
?path_expr : location_path
           | filter_expr
           // Not sure how these would work?
           //| filter_expr abbrev_child relativelocation_path
           //| filter_expr abbrev_descendent relativelocation_path
?filter_expr : primary_expr
           | filter_expr predicate

_predicate_list        : predicate*
?predicate        : index_predicate | _expr_predicate
_expr_predicate    : "[" (predicate_expr | slice_expr) "]"
predicate_expr   : expr
index_predicate: INDEX_PREDICATE_TAG
INDEX_PREDICATE_TAG.2: "[" INTEGER_LITERAL "]"

?expr            : or_expr     
?or_expr         : (or_expr "or ")? and_expr
?and_expr        : (and_expr "and")? equality_expr
?equality_expr   : (equality_expr _equality_op)? relational_expr
_equality_op     : OP_EQUAL | OP_NOT_EQUAL
?relational_expr : (relational_expr _relational_op)? additive_expr
_relational_op   : OP_LESS_THAN | OP_GREATER_THAN | OP_LESS_THAN_EQUAL | OP_GREATER_THAN_EQUAL
?additive_expr   : (additive_expr _additive_op)? multiply_expr
_additive_op     : ADD_OP | MINUS_OP
?multiply_expr   : (multiply_expr _multiply_op)? unary_expr
_multiply_op     : MUL_OP | DIV_OP | MOD_OP
?unary_expr      : ("-" unary_expr)? union_expr     
?union_expr      : (union_expr "|")? path_expr

?node_test         : kind_test | name_test     
?name_test         : tname_test | wildcard_name_test
tname_test         : _tname
wildcard_name_test : "*"
?kind_test         : (leaf_node_test | node_node_test) "(" ")"
leaf_node_test     : "leaf"
node_node_test     : "node"

?primary_expr : varref
           | parenthesized_expr
           | _literal
           | functioncall
           | attribute_accessor
		   
varref             : "$" _tname     
parenthesized_expr: "(" expr ")"
attribute_accessor : "@" _tname

functioncall       : _tname "(" functioncall_list? ")"
?functioncall_list : (functioncall_list ",")? expr    

// ?subscript_expression : INTEGER_LITERAL -> child_index | slice_op -> slice
!slice_expr             : INTEGER_LITERAL? ":" INTEGER_LITERAL? (":" INTEGER_LITERAL)?

_literal         : string_literal | integer_literal | decimal_literal
integer_literal : INTEGER_LITERAL
INTEGER_LITERAL : ["+"|"-"]? INT
string_literal  : STRING_LITERAL
STRING_LITERAL  : /"[^"]*\"/ | /"[^"]*\"/
decimal_literal : DECIMAL_LITERAL
DECIMAL_LITERAL : ["+"|"-"]? DECIMAL

// tname: _tname
_tname: CNAME

OP_EQUAL              : "=="
OP_NOT_EQUAL          : "!="
OP_LESS_THAN          : "<"
OP_GREATER_THAN       : ">"
OP_LESS_THAN_EQUAL    : "<="
OP_GREATER_THAN_EQUAL : ">="
ADD_OP                : "+"
MINUS_OP              : "-"
MUL_OP                : "*"
DIV_OP                : "div"
MOD_OP                : "mod"

%import common.CNAME
%import common.INT
%import common.DECIMAL
%import common.WS_INLINE

%ignore WS_INLINE